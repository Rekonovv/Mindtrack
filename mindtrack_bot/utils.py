import os
import datetime

LOG_DIR = "logs"

def get_today_folder(chat_id=None, date_override=None):
    if date_override is not None:
        folder_date = date_override
    else:
        folder_date = datetime.date.today().isoformat()
    if chat_id is not None:
        folder = os.path.join(LOG_DIR, str(chat_id), folder_date)
    else:
        folder = os.path.join(LOG_DIR, folder_date)
    os.makedirs(folder, exist_ok=True)
    return folder

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏—ë–º–∞ –ø–∏—â–∏
def save_food(label, text, chat_id=None):
    folder = get_today_folder(chat_id)
    path = os.path.join(folder, "food.txt")
    with open(path, "a", encoding="utf-8") as f:
        f.write(f"[{label}] {text}\n")

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ–¥—ã
def save_water(amount, chat_id=None):
    folder = get_today_folder(chat_id)
    path = os.path.join(folder, "water.txt")
    time = datetime.datetime.now().strftime("%H:%M")
    with open(path, "a", encoding="utf-8") as f:
        f.write(f"{time} ‚Äî {amount} –º–ª\n")

# –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π –≤–æ–¥—ã –∑–∞ –¥–µ–Ω—å
def get_water_summary(chat_id=None):
    folder = get_today_folder(chat_id)
    path = os.path.join(folder, "water.txt")
    total = 0
    try:
        if os.path.exists(path):
            with open(path, encoding="utf-8") as f:
                for line in f:
                    parts = line.strip().split("‚Äî")
                    if len(parts) == 2:
                        amount = parts[1].strip().replace("–º–ª", "").strip()
                        total += int(amount)
    except Exception:
        pass
    return total

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–æ–π —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
def save_reflection(text, chat_id=None):
    folder = get_today_folder(chat_id)
    path = os.path.join(folder, "reflection.txt")
    with open(path, "a", encoding="utf-8") as f:
        f.write(text + "\n")

# –°–≤–æ–¥–∫–∞ –∑–∞ –¥–µ–Ω—å
def get_day_summary(chat_id=None, date_override=None):
    folder = get_today_folder(chat_id, date_override=date_override)
    parts = []

    # –ï–¥–∞
    food_path = os.path.join(folder, "food.txt")
    try:
        if os.path.exists(food_path):
            with open(food_path, encoding="utf-8") as f:
                parts.append("üçΩÔ∏è –ß—Ç–æ —Ç—ã –µ–ª —Å–µ–≥–æ–¥–Ω—è:\n" + f.read())
    except Exception as e:
        parts.append(f"[–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –µ–¥—ã: {e}]")

    # –í–æ–¥–∞
    try:
        total_water = get_water_summary(chat_id) if date_override is None else get_water_summary_by_date(chat_id, date_override)
        parts.append(f"üíß –í–æ–¥—ã –≤—ã–ø–∏—Ç–æ: {total_water} –º–ª")
    except Exception as e:
        parts.append(f"[–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á—ë—Ç–µ –≤–æ–¥—ã: {e}]")

    # –†–µ—Ñ–ª–µ–∫—Å–∏—è
    reflection_path = os.path.join(folder, "reflection.txt")
    try:
        if os.path.exists(reflection_path):
            with open(reflection_path, encoding="utf-8") as f:
                parts.append("üí≠ –†–µ—Ñ–ª–µ–∫—Å–∏—è:\n" + f.read())
    except Exception as e:
        parts.append(f"[–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏: {e}]")

    return "\n\n".join(parts)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–¥—ã –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É
def get_water_summary_by_date(chat_id=None, date_override=None):
    folder = get_today_folder(chat_id, date_override=date_override)
    path = os.path.join(folder, "water.txt")
    total = 0
    try:
        if os.path.exists(path):
            with open(path, encoding="utf-8") as f:
                for line in f:
                    parts = line.strip().split("‚Äî")
                    if len(parts) == 2:
                        amount = parts[1].strip().replace("–º–ª", "").strip()
                        total += int(amount)
    except Exception:
        pass
    return total
